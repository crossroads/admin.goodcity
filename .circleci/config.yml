version: 2.1

aliases:

  - defaults: &defaults
      docker:
        - image: circleci/node:10.22
      working_directory: ~/code
      environment:
        # JOBS: 1 required to disable workers pools on broccoli as the underlying container reports 36 cores and runs out of memory if trying to spawn 36 threads!
        JOBS: 1
  - &restore-repo-cache
      key: v1-admin-goodcity-repo-{{ .Environment.CIRCLE_SHA1 }}
  - &restore-yarn-cache
      keys:
        - v1-admin-goodcity-yarn-packages-{{ checksum "yarn.lock" }}
  - &save-yarn-cache
      key: v1-admin-goodcity-yarn-packages-{{ checksum "yarn.lock" }}
      paths:
        - node_modules
        - ~/.cache/yarn
  - &restore-ios-yarn-cache
      keys:
        - v1-admin-goodcity-ios-yarn-packages-{{ checksum "yarn.lock" }}
  - &save-ios-yarn-cache
      key: v1-admin-goodcity-ios-yarn-packages-{{ checksum "yarn.lock" }}
      paths:
        - node_modules
        - ~/.cache/yarn
  - &yarn
    |
      yarn install --non-interactive --cache-folder ~/.cache/yarn --frozen-lockfile
  - &restore-bower-cache
      key: v1-admin-goodcity-bower-components-{{ checksum "bower.json" }}
  - &save-bower-cache
      key: v1-admin-goodcity-bower-components-{{ checksum "bower.json" }}
      paths:
        - bower_components
  - &restore-ios-bower-cache
      key: v1-admin-goodcity-ios-bower-components-{{ checksum "bower.json" }}
  - &save-ios-bower-cache
      key: v1-admin-goodcity-ios-bower-components-{{ checksum "bower.json" }}
      paths:
        - bower_components
  - &restore-bundler-cache
      key: v1-admin-goodcity-bundle-{{ checksum "Gemfile.lock" }}
  - &save-bundler-cache
      key: v1-admin-goodcity-bundle-{{ checksum "Gemfile.lock" }}
      paths:
        - vendor/bundle
  - &restore-ios-bundler-cache
      key: v1-admin-goodcity-ios-bundle-{{ checksum "Gemfile.lock" }}
  - &save-ios-bundler-cache
      key: v1-admin-goodcity-ios-bundle-{{ checksum "Gemfile.lock" }}
      paths:
        - vendor/bundle

# -----------------------------
# Orbs
# -----------------------------

orbs:
  azure-cli: circleci/azure-cli@1.2.0

jobs:
  checkout_code:
    <<: *defaults
    steps:
      - checkout
      - save_cache:
          key: v1-admin-goodcity-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/code

  package_dependencies:
    <<: *defaults
    steps:
      - restore_cache: *restore-repo-cache
      - restore_cache: *restore-yarn-cache
      - run: *yarn
      - save_cache: *save-yarn-cache
      - restore_cache: *restore-bower-cache
      - run: yarn run bower install
      - save_cache: *save-bower-cache

  tests:
    <<: *defaults
    docker:
      - image: circleci/node:10-browsers
    steps:
      - restore_cache: *restore-repo-cache
      - restore_cache: *restore-yarn-cache
      - restore_cache: *restore-bower-cache
      - run:
          name: Start Ember test server
          command: yarn run ember server --port 4201
          background: true
      - run:
          name: Wait for Ember test server to start
          command: dockerize -wait tcp://localhost:4201 -timeout 1m
      - run:
          name: Run Ember tests
          command: yarn test:ci

  www_build:
    <<: *defaults
    steps:
      - restore_cache: *restore-repo-cache
      - restore_cache: *restore-yarn-cache
      - restore_cache: *restore-bower-cache
      - run:
          command: |
            APP_VERSION=$(jq -r ".version" package.json)
            APP_SHA=$(echo $CIRCLE_SHA1 | cut -c1-7)
            APP_SHARED_SHA=$(grep "resolved.*shared.goodcity" yarn.lock | cut -d '#' -f2 | sed 's,\",,g')
            ENVIRONMENT=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo "production"; else echo "staging"; fi)
            EMBER_CLI_CORDOVA=0 ENVIRONMENT=${ENVIRONMENT} yarn run ember build --environment=production
      - run: mv dist/ dist-www
      - persist_to_workspace:
          root: .
          paths:
            - dist-www/

  www_deploy:
    <<: *defaults
    docker:
      - image: cimg/ruby:2.7.3
    steps:
      - restore_cache: *restore-repo-cache
      - restore_cache: *restore-bundler-cache
      - run: bundle config set --local deployment 'true' && (bundle check || bundle install --jobs=2 --retry=3)
      - save_cache: *save-bundler-cache
      - attach_workspace:
          at: ~/code
      - run: mv dist-www/ dist
      - azure-cli/install
      - azure-cli/login-with-service-principal
      - run:
          name: Upload to www server + azure storage
          command: |
            STAGE=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo "production"; else echo "staging"; fi)
            STAGE=$STAGE bundle exec fastlane web deploy
      - run:
          name: Upload Source Map to Rollbar
          command: |
            APP_VERSION=$(jq -r ".version" package.json)
            SOURCE_MAP_WITH_VARIABLE_NAME=$(grep sourceMappingURL dist/assets/goodcity-*.js)
            SOURCE_MAP=$(eval echo $SOURCE_MAP_WITH_VARIABLE_NAME | cut -c22-100)
            ASSET_HOST_URL=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo "https://admin.goodcity.hk/assets"; else echo "https://admin-staging.goodcity.hk/assets"; fi)
            curl https://api.rollbar.com/api/1/sourcemap/download -F access_token="${ROLLBAR_KEY}" -F version="${APP_VERSION}" -F minified_url=$ASSET_HOST_URL/$SOURCE_MAP

  ember_cordova_build:
    <<: *defaults
    environment:
      JOBS: 1 # stops ember running out of memory when building
    steps:
      - restore_cache: *restore-repo-cache
      - restore_cache: *restore-yarn-cache
      - restore_cache: *restore-bower-cache
      - run:
          name: Ember build
          command: |
            APP_VERSION=$(jq -r ".version" package.json)
            APP_SHA=$(echo $CIRCLE_SHA1 | cut -c1-7)
            APP_SHARED_SHA=$(grep "resolved.*shared.goodcity" yarn.lock | cut -d '#' -f2 | sed 's,\",,g')
            ENVIRONMENT=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo "production"; else echo "staging"; fi)
            EMBER_CLI_CORDOVA=1 ENVIRONMENT=${ENVIRONMENT} yarn run ember build --environment=production
      - run: mv dist/ cordova/www
      - persist_to_workspace:
          root: .
          paths:
            - cordova/www

  android_build_and_deploy:
    <<: *defaults
    docker:
      - image: cimg/android:2021.10.2-node
    environment:
      JVM_OPTS: -Xmx3200m
      CIRCLE_ARTIFACTS: /home/circleci/code/cordova/platforms/android/build/outputs/apk
      JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    steps:
      - restore_cache: *restore-repo-cache
      - restore_cache: *restore-yarn-cache
      - restore_cache: *restore-bundler-cache
      - run: bundle config set --local deployment 'true' && bundle install --jobs=2 --retry=3
      - save_cache: *save-bundler-cache
      - attach_workspace:
          at: ~/code
      - run:
          name: Setup Environment variables
          command: |
              echo 'export ENVIRONMENT=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo production; else echo staging; fi)' >> $BASH_ENV
              echo 'export PATH=$PATH:`yarn bin`' >> $BASH_ENV
      - run:
          name: Install dependencies
          command: |
              sudo apt-get update
              sudo apt remove openjdk-11-*
              sudo apt-get install -y apt-transport-https ca-certificates wget dirmngr gnupg software-properties-common openjdk-8-jdk
              sudo npm install -g cordova@10
      - azure-cli/install
      - azure-cli/login-with-service-principal
      - run: az storage blob download --account-name $GOODCITY_STORAGE -c ci-app-secrets -n admin-$ENVIRONMENT-google-services.json -f ~/code/cordova/google-services.json
      - run: az storage blob download --account-name $GOODCITY_STORAGE -c ci-app-secrets -n goodcity.keystore -f ~/code/cordova/goodcity.keystore
      - run: az storage blob download --account-name $GOODCITY_STORAGE -c ci-app-secrets -n google-play-key.json -f ~/code/fastlane/google-play-key.json
      - run:
          name: Build android app
          command: |
            node scripts/rename_package.js
            cordova platform add android@10.1.1
            if [ "$ENVIRONMENT" == "production" ]; then
              cordova build android --release -- \
                --packageType=apk --keystore=goodcity.keystore --storePassword="${GOODCITY_KEYSTORE_PASSWORD}" \
                --alias="${GOODCITY_KEYSTORE_ALIAS}" --password="${GOODCITY_KEYSTORE_PASSWORD}"
            else
              cordova build android --debug --device
            fi
          working_directory: cordova
      - store_artifacts:
          path: cordova/platforms/android/app/build/outputs/apk/
      - run:
          name: release android build
          command: bundle exec fastlane android ${ENVIRONMENT}
          working_directory: ~/code

  ios_build_and_deploy:
    macos:
      xcode: "12.0.1"
    working_directory: ~/code
    shell: /bin/bash --login -eo pipefail
    environment:
      CIRCLE_ARTIFACTS: /Users/distiller/code/cordova/platforms/ios/build/device
      HOMEBREW_NO_AUTO_UPDATE: 1
    steps:
      - checkout
      - run: brew install azure-cli
      - attach_workspace:
          at: ~/code
      - run: echo 'export ENVIRONMENT=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo production; else echo staging; fi)' >> $BASH_ENV
      - restore_cache: *restore-ios-bundler-cache
      - run: bundle config set --local deployment 'true' && (bundle check || bundle install --jobs=2 --retry=3)
      - save_cache: *save-ios-bundler-cache
      - run: az login --service-principal --tenant ${AZURE_SP_TENANT} -u ${AZURE_SP} -p ${AZURE_SP_PASSWORD}
      - run: mkdir -pv ~/Library/MobileDevice/Provisioning\ Profiles/
      - run: az storage blob download --account-name $GOODCITY_STORAGE -c ci-app-secrets -n admin-${ENVIRONMENT}.mobileprovision -f ~/Library/MobileDevice/Provisioning\ Profiles/admin-${ENVIRONMENT}.mobileprovision
      - run: az storage blob download --account-name $GOODCITY_STORAGE -c ci-app-secrets -n AuthKey_${APPSTORE_CONNECT_API_KEY_ID}.p8 -f ~/code/fastlane/AuthKey_${APPSTORE_CONNECT_API_KEY_ID}.p8
      - run: az storage blob download --account-name $GOODCITY_STORAGE -c ci-app-secrets -n hk.goodcity.${ENVIRONMENT}.p12 -f ~/code/fastlane/hk.goodcity.${ENVIRONMENT}.p12
      - run: npm install -g cordova@10.0.0
      - run: bundle exec fastlane ios prepare_certificates cert:hk.goodcity.${ENVIRONMENT}.p12
      - run:
          name: Build iOS app
          command: |
            npm install cordova-common
            node scripts/rename_package.js
            cordova platform add ios@6.2.0
            UUID=`openssl smime -inform der -verify -noverify -in "/Users/distiller/Library/MobileDevice/Provisioning Profiles/admin-${ENVIRONMENT}.mobileprovision" | grep -A 1 UUID | sed "s@.*<string>\(.*\)</string>.*@\1@" | tail -n 1`
            PACKAGE_TYPE=$(if [ "$ENVIRONMENT" == "production" ]; then echo app-store; else echo development; fi)
            CODE_SIGN_IDENTITY=$(if [ "$ENVIRONMENT" == "production" ]; then echo 'iPhone Distribution'; else echo 'iPhone Developer'; fi)
            cordova build ios --release --device --codeSignIdentity="${CODE_SIGN_IDENTITY}" --developmentTeam="6B8FS8W94M" \
               --packageType="${PACKAGE_TYPE}" --automaticProvisioning=true  --buildFlag="IPHONEOS_DEPLOYMENT_TARGET=11.0" \
               --provisioningProfile="${UUID}"
          working_directory: cordova

workflows:
    version: 2
    build-test-and-deploy:
      jobs:
        - checkout_code
        - package_dependencies:
            requires:
              - checkout_code
        # - tests:
        #     requires:
        #       - package_dependencies
        # - www_build:
        #     requires:
        #       - tests
        #       - package_dependencies
        #     filters:
        #       branches:
        #         only: /^(master|live)$/
        # - www_deploy:
        #     requires:
        #       - www_build
        #     filters:
        #       branches:
        #         only: /^(master|live)$/
        - ember_cordova_build:
            requires:
              # - tests
              - package_dependencies
            # filters:
            #   branches:
            #     only: /^(master|live)$/
        - android_build_and_deploy:
            requires:
              - ember_cordova_build
            # filters:
            #   branches:
            #     only: /^(master|live)$/
        - ios_build_and_deploy:
            requires:
              # - tests
              - ember_cordova_build
            # filters:
            #   branches:
            #     only: /^(master|live)$/
