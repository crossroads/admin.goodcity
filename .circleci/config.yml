version: 2.1

aliases:

  - defaults: &defaults
      docker:
        - image: circleci/node:10.22
      working_directory: ~/code
      environment:
        # JOBS: 1 required to disable workers pools on broccoli as the underlying container reports 36 cores and runs out of memory if trying to spawn 36 threads!
        JOBS: 1
  - &restore-repo-cache
      key: v1-admin-goodcity-repo-{{ .Environment.CIRCLE_SHA1 }}
  - &restore-yarn-cache
      keys:
        - v2-admin-goodcity-yarn-packages-{{ checksum "yarn.lock" }}
  - &save-yarn-cache
      key: v2-admin-goodcity-yarn-packages-{{ checksum "yarn.lock" }}
      paths:
        - node_modules
        - ~/.cache/yarn
  - &restore-ios-yarn-cache
      keys:
        - v2-admin-goodcity-ios-yarn-packages-{{ checksum "yarn.lock" }}
  - &save-ios-yarn-cache
      key: v2-admin-goodcity-ios-yarn-packages-{{ checksum "yarn.lock" }}
      paths:
        - node_modules
        - ~/.cache/yarn
  - &yarn
    |
      git config --global url.https://github.com/.insteadOf git://github.com/  
      yarn install --non-interactive --cache-folder ~/.cache/yarn --frozen-lockfile
  - &restore-bower-cache
      key: v2-admin-goodcity-bower-components-{{ checksum "bower.json" }}
  - &save-bower-cache
      key: v2-admin-goodcity-bower-components-{{ checksum "bower.json" }}
      paths:
        - bower_components
  - &restore-bundler-cache
      key: v3-admin-goodcity-bundle-{{ checksum "Gemfile.lock" }}
  - &save-bundler-cache
      key: v3-admin-goodcity-bundle-{{ checksum "Gemfile.lock" }}
      paths:
        - vendor/bundle
  - &restore-ios-bundler-cache
      key: v3-admin-goodcity-ios-bundle-{{ checksum "Gemfile.lock" }}
  - &save-ios-bundler-cache
      key: v3-admin-goodcity-ios-bundle-{{ checksum "Gemfile.lock" }}
      paths:
        - vendor/bundle

# -----------------------------
# Orbs
# -----------------------------

orbs:
  azure-cli: circleci/azure-cli@1.2.0
  ruby: circleci/ruby@2.5.0

jobs:
  checkout_code:
    <<: *defaults
    steps:
      - checkout
      - save_cache:
          key: v1-admin-goodcity-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/code

  package_dependencies:
    <<: *defaults
    steps:
      - restore_cache: *restore-repo-cache
      - restore_cache: *restore-yarn-cache
      - run: *yarn
      - save_cache: *save-yarn-cache
      - restore_cache: *restore-bower-cache
      - run: yarn run bower install
      - save_cache: *save-bower-cache

  tests:
    <<: *defaults
    docker:
      - image: circleci/node:10-browsers
    steps:
      - restore_cache: *restore-repo-cache
      - restore_cache: *restore-yarn-cache
      - restore_cache: *restore-bower-cache
      - run:
          name: Start Ember test server
          command: yarn run ember server --port 4201
          background: true
      - run:
          name: Wait for Ember test server to start
          command: dockerize -wait tcp://localhost:4201 -timeout 1m
      - run:
          name: Run Ember tests
          command: yarn test:ci

  www_build:
    <<: *defaults
    steps:
      - restore_cache: *restore-repo-cache
      - restore_cache: *restore-yarn-cache
      - restore_cache: *restore-bower-cache
      - run:
          command: |
            APP_VERSION=$(jq -r ".version" package.json)
            APP_SHA=$(echo $CIRCLE_SHA1 | cut -c1-7)
            APP_SHARED_SHA=$(grep "resolved.*shared.goodcity" yarn.lock | cut -d '#' -f2 | sed 's,\",,g')
            ENVIRONMENT=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo "production"; else echo "staging"; fi)
            EMBER_CLI_CORDOVA=0 ENVIRONMENT=${ENVIRONMENT} yarn run ember build --environment=production
      - run: mv dist/ dist-www
      - persist_to_workspace:
          root: .
          paths:
            - dist-www/

  www_deploy:
    <<: *defaults
    docker:
      - image: cimg/ruby:2.7.3
    steps:
      - restore_cache: *restore-repo-cache
      - restore_cache: *restore-bundler-cache
      - run: bundle config set --local deployment 'true' && (bundle check || bundle install --jobs=2 --retry=3)
      - save_cache: *save-bundler-cache
      - attach_workspace:
          at: ~/code
      - run: mv dist-www/ dist
      - azure-cli/install
      - azure-cli/login-with-service-principal
      - run:
          name: Upload to www server + azure storage
          command: |
            sudo ln -s /usr/local/bin/ruby /usr/local/bin/ruby2.7
            STAGE=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo "production"; else echo "staging"; fi)
            STAGE=$STAGE bundle exec fastlane web deploy
      - run:
          name: Upload Source Map to Rollbar
          command: |
            APP_VERSION=$(jq -r ".version" package.json)
            SOURCE_MAP_WITH_VARIABLE_NAME=$(grep sourceMappingURL dist/assets/goodcity-*.js)
            SOURCE_MAP=$(eval echo $SOURCE_MAP_WITH_VARIABLE_NAME | cut -c22-100)
            ASSET_HOST_URL=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo "https://admin.goodcity.hk/assets"; else echo "https://admin-staging.goodcity.hk/assets"; fi)
            curl https://api.rollbar.com/api/1/sourcemap/download -F access_token="${ROLLBAR_KEY}" -F version="${APP_VERSION}" -F minified_url=$ASSET_HOST_URL/$SOURCE_MAP

  ember_cordova_build:
    <<: *defaults
    environment:
      JOBS: 1 # stops ember running out of memory when building
    steps:
      - restore_cache: *restore-repo-cache
      - restore_cache: *restore-yarn-cache
      - restore_cache: *restore-bower-cache
      - run:
          name: Ember build
          command: |
            APP_SHA=$(echo $CIRCLE_SHA1 | cut -c1-7)
            APP_SHARED_SHA=$(grep "resolved.*shared.goodcity" yarn.lock | cut -d '#' -f2 | sed 's,\",,g')
            ENVIRONMENT=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo "production"; else echo "staging"; fi)
            EMBER_CLI_CORDOVA=1 ENVIRONMENT=${ENVIRONMENT} yarn run ember build --environment=production
      - run: mv dist/ cordova/www
      - persist_to_workspace:
          root: .
          paths:
            - cordova/www

  android_build_and_deploy:
    <<: *defaults
    docker:
      - image: cimg/android:2025.01-browsers
    environment:
      JVM_OPTS: -Xmx3200m
      CIRCLE_ARTIFACTS: /home/circleci/code/cordova/platforms/android/build/outputs/apk
    steps:
      - run:
          command: "#!/usr/bin/env bash\n\ndetected_platform=\"$(uname -s | tr '[:upper:]' '[:lower:]')\"\nif [ \"$detected_platform\" = \"darwin\" ]; then\n  brew install gpg2\nfi\n\n\n# Disable IPv6\nmkdir -p ~/.gnupg/\nfind ~/.gnupg -type d -exec chmod 700 {} \\;\necho \"disable-ipv6\" >> ~/.gnupg/dirmngr.conf\n\n# get keys to validate install https://rvm.io/rvm/security\n# https://stackoverflow.com/questions/69344989/gpg-no-keyserver-available\ndeclare -a keyservers=(\n  \"keys.openpgp.org\"\n  \"hkp://keyserver.ubuntu.com:80\"\n  \"keyserver.ubuntu.com\"\n  \"ha.pool.sks-keyservers.net\"\n  \"hkp://ha.pool.sks-keyservers.net:80\"\n  \"p80.pool.sks-keyservers.net\"\n  \"hkp://p80.pool.sks-keyservers.net:80\"\n  \"pgp.mit.edu\"\n  \"hkp://pgp.mit.edu:80\"\n)\n\ngpg_key_downloaded=\"false\"\nfor server in \"${keyservers[@]}\"; do\n  echo \"Fetching GPG keys from ${server}:\"\n  \n  if gpg --keyserver $server --keyserver-options timeout=10 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB \n  then\n    echo \"- GPG keys successfully added from server '${server}'\"\n    gpg_key_downloaded=\"true\"\n    break\n  else\n    echo \"- Network error: Unable to receive GPG keys from server '${server}'.\"\n  fi\ndone\nif [ \"$gpg_key_downloaded\" = \"false\" ]; then\n  echo \"Unable to receive GPG keys from any of the known GPG keyservers. Trying to import them from rvm.io.\"\n  # https://rvm.io/rvm/security#alternatives\n  \n  if curl -sSL https://rvm.io/mpapis.asc | gpg --import - && curl -sSL https://rvm.io/pkuczynski.asc | gpg --import - \n  then\n    echo \"- GPG keys successfully imported directly from rvm.io server\"\n  else\n    echo \"- Could not get keys from rvm.io server either, FAILING\"\n    exit 1\n  fi\nfi\n\n# https://rvm.io/rvm/security#trust-our-keys\necho 409B6B1796C275462A1703113804BB82D39DC0E3:6: | gpg --import-ownertrust\necho 7D2BAF1CF37B13E2069D6956105BD0E739499BDB:6: | gpg --import-ownertrust\n\n## Update if RVM is installed and exit\nif [ -x \"$(command -v rvm -v)\" ]; then\n  rvm get head\n  exit 0\nfi\n\ncurl -sSL \"https://get.rvm.io\" | bash -s stable\n\n# check for machine image specific path\nif [ -d /opt/circleci/.rvm ]; then\n  echo \"Setting PATH up for system install\"\n  # this should be what needs to be added to that $BASH_ENV since this is what's in bash_profile - i dont know when $HOME is set\n  echo 'export PATH=$PATH:/opt/circleci/.rvm/bin' >> $BASH_ENV\n  echo \"source /opt/circleci/.rvm/scripts/rvm\" >> $BASH_ENV\n  # this will source if anyone logs in noninteractively, nvm setup only adds nvm to the path, to get the rubygems later you need to source this again\n  echo \"source /opt/circleci/.rvm/scripts/rvm\" >> ~/.bashrc\n  echo \"export RVM_HOME=/opt/circleci/.rvm\" >> $BASH_ENV\nelse\n  # Most circle builds run as a root user, in which case rvm gets installed in /usr/local/rvm instead of $HOME/.rvm\n  RVM_HOME=$HOME/.rvm\n  if [ -f \"$RVM_HOME/scripts/rvm\" ]; then\n    echo \"Using $RVM_HOME\"\n  else\n    RVM_HOME=/usr/local/rvm\n    echo \"Using $RVM_HOME\"\n  fi\n  echo \"export RVM_HOME=$RVM_HOME\" >> $BASH_ENV\n\n  echo \"Setting PATH up for local install\"\n  # this should be what needs to be added to that $BASH_ENV since this is what's in bash_profile - i dont know when $HOME is set\n  echo 'export PATH=$PATH:$RVM_HOME/bin' >> $BASH_ENV\n  echo \"source $RVM_HOME/scripts/rvm\" >> $BASH_ENV\n  # this will source if anyone logs in noninteractively, nvm setup only adds nvm to the path, to get the rubygems later you need to source this again\n  echo \"source $RVM_HOME/scripts/rvm\" >> ~/.bashrc\nfi\n\n# check if it seems like they're using rbenv already\nif command -v rbenv &> /dev/null && [ -f \".ruby-version\" ]\nthen\n    echo -e \"\\e[91m\"\n    cat \\<<'SUGGESTION'\n\n#######################################################################\n# WARNING\n#######################################################################\n\nWe've detected that you're running on a system that has the rbenv ruby\nversion manager already installed, and you have a .ruby-version file in\nthe current working directory.\n\nThe circleci/ruby orb (that's currently executing) uses RVM to install\nruby.  Using more than one ruby version manager at once can, depending\non the configuration of your system, cause issues.\n\nTo install ruby with rbenv without using the circleci/ruby's \"install\"\ncommand, you can simply run a step that executes:\n\n  rbenv install\n\nWhich will install the version of ruby that is specified in the\n.ruby-version file.\n\n#######################################################################\n\nSUGGESTION\n    echo -e \"\\e[0m\"\nfi\n"
          name: Install/Verify Ruby Version Manager.
      - run: rvm autolibs enable && rvm install 3.3.5
      - restore_cache: *restore-repo-cache
      - restore_cache: *restore-yarn-cache
      - restore_cache: *restore-bundler-cache
      - run: bundle config set --local deployment 'true' && bundle install --jobs=2 --retry=3
      - save_cache: *save-bundler-cache
      - attach_workspace:
          at: ~/code
      - run:
          name: Setup Environment variables
          command: |
              echo 'export ENVIRONMENT=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo production; else echo staging; fi)' >> $BASH_ENV
              echo 'export PATH=$PATH:/home/circleci/code/cordova/node_modules/.bin' >> $BASH_ENV
      - run: curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
      - azure-cli/install
      - azure-cli/login-with-service-principal
      - run: az storage blob download --account-name $GOODCITY_STORAGE -c ci-app-secrets -n admin-$ENVIRONMENT-google-services.json -f ~/code/cordova/google-services.json
      - run: az storage blob download --account-name $GOODCITY_STORAGE -c ci-app-secrets -n goodcity.keystore -f ~/code/cordova/goodcity.keystore
      - run: az storage blob download --account-name $GOODCITY_STORAGE -c ci-app-secrets -n google-play-key.json -f ~/code/fastlane/google-play-key.json
      - run:
          name: Build android app
          command: |
            npm install cordova@12
            node rename_package.js
            cordova platform add android
            if [ "$ENVIRONMENT" == "production" ]; then
              cordova build android --release -- \
                --packageType=apk --keystore=goodcity.keystore --storePassword="${GOODCITY_KEYSTORE_PASSWORD}" \
                --alias="${GOODCITY_KEYSTORE_ALIAS}" --password="${GOODCITY_KEYSTORE_PASSWORD}"
            else
              cordova build android --debug --device
            fi
          working_directory: cordova
      - store_artifacts:
          path: cordova/platforms/android/app/build/outputs/apk/
      - run:
          name: release android build
          command: bundle exec fastlane android ${ENVIRONMENT}
          working_directory: ~/code

  ios_build_and_deploy:
    macos:
      xcode: "16.2.0"
    resource_class: macos.m1.medium.gen1
    working_directory: ~/code
    shell: /bin/bash --login -eo pipefail
    environment:
      CIRCLE_ARTIFACTS: /Users/distiller/code/cordova/platforms/ios/build/Release-iphoneos
      HOMEBREW_NO_AUTO_UPDATE: 1
    steps:
      - checkout
      - run: brew install azure-cli
      - attach_workspace:
          at: ~/code
      - run:
          name: Setup Environment variables
          command: |
              echo 'export ENVIRONMENT=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo production; else echo staging; fi)' >> $BASH_ENV
              echo 'export PATH=$PATH:`npm bin`' >> $BASH_ENV
      - restore_cache: *restore-ios-bundler-cache
      - run: rbenv local 3.3.5
      - run: bundle config set --local deployment 'true' && (bundle check || bundle install --jobs=2 --retry=3)
      - save_cache: *save-ios-bundler-cache
      - run: az login --service-principal --tenant ${AZURE_SP_TENANT} -u ${AZURE_SP} -p ${AZURE_SP_PASSWORD}
      - run: mkdir -pv ~/Library/MobileDevice/Provisioning\ Profiles/
      - run: az storage blob download --account-name $GOODCITY_STORAGE -c ci-app-secrets -n admin-${ENVIRONMENT}.mobileprovision -f ~/Library/MobileDevice/Provisioning\ Profiles/admin-${ENVIRONMENT}.mobileprovision
      - run: az storage blob download --account-name $GOODCITY_STORAGE -c ci-app-secrets -n AuthKey_${APPSTORE_CONNECT_API_KEY_ID}.p8 -f ~/code/fastlane/AuthKey_${APPSTORE_CONNECT_API_KEY_ID}.p8
      - run: az storage blob download --account-name $GOODCITY_STORAGE -c ci-app-secrets -n hk.goodcity.${ENVIRONMENT}.p12 -f ~/code/fastlane/hk.goodcity.${ENVIRONMENT}.p12
      - run: bundle exec fastlane ios prepare_certificates cert:hk.goodcity.${ENVIRONMENT}.p12
      - run:
          name: Build iOS app
          command: |
            npm install cordova@12
            node rename_package.js
            bundle exec yarn run cordova platform add ios@7
            UUID=`openssl smime -inform der -verify -noverify -in "/Users/distiller/Library/MobileDevice/Provisioning Profiles/admin-${ENVIRONMENT}.mobileprovision" | grep -A 1 UUID | sed "s@.*<string>\(.*\)</string>.*@\1@" | tail -n 1`
            PACKAGE_TYPE=$(if [ "$ENVIRONMENT" == "production" ]; then echo app-store; else echo development; fi)
            CODE_SIGN_IDENTITY=$(if [ "$ENVIRONMENT" == "production" ]; then echo 'iPhone Distribution'; else echo 'iPhone Developer'; fi)
            bundle exec yarn run cordova build ios --release --device --codeSignIdentity="${CODE_SIGN_IDENTITY}" --developmentTeam="6B8FS8W94M" \
               --packageType="${PACKAGE_TYPE}" --automaticProvisioning=true  --buildFlag="IPHONEOS_DEPLOYMENT_TARGET=13" \
               --provisioningProfile="${UUID}"
          working_directory: cordova
      - store_artifacts:
          path: cordova/platforms/ios/build/Release-iphoneos
      - run:
          name: Release ios build
          command: bundle exec fastlane ios ${ENVIRONMENT}

workflows:
    version: 2
    build-test-and-deploy:
      jobs:
        - checkout_code
        - package_dependencies:
            requires:
              - checkout_code
        # - tests:
        #     requires:
        #       - package_dependencies
        # - www_build:
        #     requires:
        #       - tests
        #       - package_dependencies
        #     filters:
        #       branches:
        #         only: /^(master|live)$/
        # - www_deploy:
        #     requires:
        #       - www_build
        #     filters:
        #       branches:
        #         only: /^(master|live)$/
        - ember_cordova_build:
            requires:
              # - tests
              - package_dependencies
            filters:
              branches:
                only: /^(master|live|update-xcode)$/
        - android_build_and_deploy:
            requires:
              # - tests
              - ember_cordova_build
            filters:
              branches:
                only: /^(master|live|update-xcode)$/
        - ios_build_and_deploy:
            requires:
              # - tests
              - ember_cordova_build
            filters:
              branches:
                only: /^(master|live|update-xcode)$/
